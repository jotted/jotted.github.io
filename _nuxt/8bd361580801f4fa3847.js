(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{1327:function(n,e,r){"use strict";r.r(e),e.default="---\nheader: Algorithms\ndescription: The data playground.\n---\n\n# Algorithm Analysis\n\n## Loop Invariants\n\nThe loop invariant has three properties.\n\n### Initialization\n\nThe property where the loop invariant is true before the first iteration. Typically, it is the outcome you are expecting once the loop ends.\n\n### Maintenance\n\nThe property where if the invariant is true before an iteration of the loop, it remains true before the next iteration.\n\n### Termination\n\nThe condition which stops the loop.\n\n# Sorting Algorithms\n\nSorting algorithms consist of manipulating numbers and sorting them.\n\n## Insertion Sort\n\nIt sorts an array $A[1, ..., n]$ of $n$ numbers or keys from smallest to greatest values.\n\nPros:\n- Efficient for small amount of elements\n- Sorts in place\n\n### Complexities\n\n| Time | Space |\n|-|-|\n| $O(n^2)$ | $O(1)$ |\n\n### Pseudocode\n\n```python\ndef insertion_sort(arr):\n  # Loop through each key in array\n  for i in range(1, len(arr)): \n    key = arr[i]\n    j = i - 1\n\n    # For each key, if the previous key is less than\n    # the current key, swap elements\n    while j >= 0 and key < arr[j]:\n      arr[j + 1] = arr[j]\n      j -= 1\n    arr[j + 1] = key\n```\n\n## Merge Sort\n\n\n"}}]);